from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio

API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞
vacancy_data = {}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n–ù–∞–∂–º–∏ /new_vacancy —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.")

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
@dp.message_handler(commands=['new_vacancy'])
async def create_vacancy(message: types.Message):
    vacancy_data[message.from_user.id] = {}
    await message.answer("üßë‚Äçüç≥ –£–∫–∞–∂–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞—Ä–∏—Å—Ç–∞):")
    await asyncio.sleep(0.5)
    return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —à–∞–≥–∞–º)
@dp.message_handler()
async def handle_input(message: types.Message):
    user_id = message.from_user.id
    if user_id not in vacancy_data:
        await message.answer("–ù–∞–∂–º–∏ /new_vacancy —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.")
        return

    user_vacancy = vacancy_data[user_id]

    if 'position' not in user_vacancy:
        user_vacancy['position'] = message.text
        await message.answer("üìç –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω:")
    elif 'location' not in user_vacancy:
        user_vacancy['location'] = message.text
        await message.answer("üïí –£–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5/2, —Å–º–µ–Ω–Ω—ã–π):")
    elif 'schedule' not in user_vacancy:
        user_vacancy['schedule'] = message.text
        await message.answer("üí∞ –£–∫–∞–∂–∏ –∑/–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45000):")
    elif 'salary' not in user_vacancy:
        user_vacancy['salary'] = message.text

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        summary = f"""‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:

üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_vacancy['position']}
üìç –†–∞–π–æ–Ω: {user_vacancy['location']}
üïí –ì—Ä–∞—Ñ–∏–∫: {user_vacancy['schedule']}
üí∞ –ó/–ø: {user_vacancy['salary']} ‚ÇΩ

–°–∫–æ—Ä–æ –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...
"""
        await message.answer(summary)

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Google Sheets
        with open("vacancies.csv", "a", encoding="utf-8") as f:
            f.write(f"{user_vacancy['position']},{user_vacancy['location']},{user_vacancy['schedule']},{user_vacancy['salary']}\n")

        vacancy_data.pop(user_id)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
